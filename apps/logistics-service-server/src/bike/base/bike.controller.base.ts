/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BikeService } from "../bike.service";
import { BikeCreateInput } from "./BikeCreateInput";
import { Bike } from "./Bike";
import { BikeFindManyArgs } from "./BikeFindManyArgs";
import { BikeWhereUniqueInput } from "./BikeWhereUniqueInput";
import { BikeUpdateInput } from "./BikeUpdateInput";

export class BikeControllerBase {
  constructor(protected readonly service: BikeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bike })
  async createBike(@common.Body() data: BikeCreateInput): Promise<Bike> {
    return await this.service.createBike({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bike] })
  @ApiNestedQuery(BikeFindManyArgs)
  async bikes(@common.Req() request: Request): Promise<Bike[]> {
    const args = plainToClass(BikeFindManyArgs, request.query);
    return this.service.bikes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bike(
    @common.Param() params: BikeWhereUniqueInput
  ): Promise<Bike | null> {
    const result = await this.service.bike({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBike(
    @common.Param() params: BikeWhereUniqueInput,
    @common.Body() data: BikeUpdateInput
  ): Promise<Bike | null> {
    try {
      return await this.service.updateBike({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBike(
    @common.Param() params: BikeWhereUniqueInput
  ): Promise<Bike | null> {
    try {
      return await this.service.deleteBike({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
